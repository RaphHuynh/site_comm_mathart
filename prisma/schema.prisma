// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  discordId     String?   @unique @map("discord_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isAdmin       Boolean   @default(false) @map("is_admin")
  isBanned      Boolean   @default(false) @map("is_banned")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations NextAuth
  accounts Account[]
  sessions Session[]
  
  // Relations personnalisées
  articles Article[]
  news     News[]
  comments Comment[]
  commentLikes CommentLike[]
  events   Event[]
  
  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  color       String?  // Couleur hexadécimale pour l'affichage
  icon        String?  // Nom de l'icône (optionnel)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  articles Article[]
  
  @@map("categories")
}

model Article {
  id            Int      @id @default(autoincrement())
  title         String
  content       String
  excerpt       String?
  featuredImage String?  @map("featured_image") // Image principale de l'article
  images        String?  // URLs des images séparées par des virgules
  authorId      String   @map("author_id")
  categoryId    Int      @map("category_id")
  tags          String?
  published     Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  author   User     @relation(fields: [authorId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  comments Comment[]
  
  @@map("articles")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  String   @map("author_id")
  articleId Int      @map("article_id")
  parentId  Int?     @map("parent_id") // Pour les réponses aux commentaires
  isApproved Boolean @default(true) @map("is_approved")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  article  Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")
  likes    CommentLike[]
  
  @@map("comments")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  commentId Int      @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@map("comment_likes")
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  excerpt   String?
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  author User @relation(fields: [authorId], references: [id])
  
  @@map("news")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String?
  authorId    String   @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  author User @relation(fields: [authorId], references: [id])

  @@map("events")
}
